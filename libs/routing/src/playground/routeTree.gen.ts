/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const CodeSplittingLazyImport = createFileRoute('/code-splitting')()
const TrainingIndexLazyImport = createFileRoute('/training/')()
const ReactIndexLazyImport = createFileRoute('/react/')()
const ReactHooksLazyImport = createFileRoute('/react/hooks')()
const ReactConcurrentFeaturesLazyImport = createFileRoute(
  '/react/concurrent-features',
)()

// Create/Update Routes

const CodeSplittingLazyRoute = CodeSplittingLazyImport.update({
  path: '/code-splitting',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/code-splitting.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TrainingIndexLazyRoute = TrainingIndexLazyImport.update({
  path: '/training/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/training/index.lazy').then((d) => d.Route),
)

const ReactIndexLazyRoute = ReactIndexLazyImport.update({
  path: '/react/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/react/index.lazy').then((d) => d.Route))

const ReactHooksLazyRoute = ReactHooksLazyImport.update({
  path: '/react/hooks',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/react/hooks.lazy').then((d) => d.Route))

const ReactConcurrentFeaturesLazyRoute =
  ReactConcurrentFeaturesLazyImport.update({
    path: '/react/concurrent-features',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/react/concurrent-features.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/code-splitting': {
      id: '/code-splitting'
      path: '/code-splitting'
      fullPath: '/code-splitting'
      preLoaderRoute: typeof CodeSplittingLazyImport
      parentRoute: typeof rootRoute
    }
    '/react/concurrent-features': {
      id: '/react/concurrent-features'
      path: '/react/concurrent-features'
      fullPath: '/react/concurrent-features'
      preLoaderRoute: typeof ReactConcurrentFeaturesLazyImport
      parentRoute: typeof rootRoute
    }
    '/react/hooks': {
      id: '/react/hooks'
      path: '/react/hooks'
      fullPath: '/react/hooks'
      preLoaderRoute: typeof ReactHooksLazyImport
      parentRoute: typeof rootRoute
    }
    '/react/': {
      id: '/react/'
      path: '/react'
      fullPath: '/react'
      preLoaderRoute: typeof ReactIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/training/': {
      id: '/training/'
      path: '/training'
      fullPath: '/training'
      preLoaderRoute: typeof TrainingIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  CodeSplittingLazyRoute,
  ReactConcurrentFeaturesLazyRoute,
  ReactHooksLazyRoute,
  ReactIndexLazyRoute,
  TrainingIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/code-splitting",
        "/react/concurrent-features",
        "/react/hooks",
        "/react/",
        "/training/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/code-splitting": {
      "filePath": "code-splitting.lazy.tsx"
    },
    "/react/concurrent-features": {
      "filePath": "react/concurrent-features.lazy.tsx"
    },
    "/react/hooks": {
      "filePath": "react/hooks.lazy.tsx"
    },
    "/react/": {
      "filePath": "react/index.lazy.tsx"
    },
    "/training/": {
      "filePath": "training/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
